/*
 * Up API
 *
 * The Up API gives you programmatic access to your balances and transaction data. You can
 * request past transactions or set up webhooks to receive real-time events when new transactions
 * hit your account. It’s new, it’s exciting and it’s just the beginning.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::{
    apis::ResponseContent,
    models::{AccountTypeEnum, OwnershipTypeEnum},
};

/// struct for passing parameters to the method [`accounts_get`]
#[derive(Clone, Debug)]
pub struct AccountsGetParams {
    /// The number of records to return in each page.
    pub page_size: Option<i32>,
    /// The type of account for which to return records. This can be used to filter Savers from
    /// spending accounts.
    pub filter_type: Option<AccountTypeEnum>,
    /// The account ownership structure for which to return records. This can be used to filter 2Up
    /// accounts from Up accounts.
    pub filter_ownership: Option<OwnershipTypeEnum>,
}

/// struct for passing parameters to the method [`accounts_id_get`]
#[derive(Clone, Debug)]
pub struct AccountsIdGetParams {
    /// The unique identifier for the account.
    pub id: String,
}

/// struct for typed errors of method [`accounts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsIdGetError {
    UnknownValue(serde_json::Value),
}

/// Retrieve a paginated list of all accounts for the currently authenticated user. The returned
/// list is paginated and can be scrolled by following the `prev` and `next` links where present.
pub async fn accounts_get(
    configuration: &configuration::Configuration,
    params: AccountsGetParams,
) -> Result<crate::models::ListAccountsResponse, Error<AccountsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let page_left_square_bracket_size_right_square_bracket = params.page_size;
    let filter_left_square_bracket_account_type_right_square_bracket = params.filter_type;
    let filter_left_square_bracket_ownership_type_right_square_bracket = params.filter_ownership;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/accounts", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_left_square_bracket_size_right_square_bracket {
        local_var_req_builder =
            local_var_req_builder.query(&[("page[size]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_account_type_right_square_bracket {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter[accountType]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_left_square_bracket_ownership_type_right_square_bracket
    {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter[ownershipType]", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountsGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a specific account by providing its unique identifier.
pub async fn accounts_id_get(
    configuration: &configuration::Configuration,
    params: AccountsIdGetParams,
) -> Result<crate::models::GetAccountResponse, Error<AccountsIdGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/accounts/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AccountsIdGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
