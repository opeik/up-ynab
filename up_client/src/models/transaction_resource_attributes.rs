/*
 * Up API
 *
 * The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionResourceAttributes {
    #[serde(rename = "status")]
    pub status: crate::models::TransactionStatusEnum,
    /// The original, unprocessed text of the transaction. This is often not a perfect indicator of the actual merchant, but it is useful for reconciliation purposes in some cases. 
    #[serde(rename = "rawText", deserialize_with = "Option::deserialize")]
    pub raw_text: Option<String>,
    /// A short description for this transaction. Usually the merchant name for purchases. 
    #[serde(rename = "description")]
    pub description: String,
    /// Attached message for this transaction, such as a payment message, or a transfer note. 
    #[serde(rename = "message", deserialize_with = "Option::deserialize")]
    pub message: Option<String>,
    /// Boolean flag set to true on transactions that support the use of categories. 
    #[serde(rename = "isCategorizable")]
    pub is_categorizable: bool,
    #[serde(rename = "holdInfo", deserialize_with = "Option::deserialize")]
    pub hold_info: Option<Box<crate::models::TransactionResourceAttributesHoldInfo>>,
    #[serde(rename = "roundUp", deserialize_with = "Option::deserialize")]
    pub round_up: Option<Box<crate::models::TransactionResourceAttributesRoundUp>>,
    #[serde(rename = "cashback", deserialize_with = "Option::deserialize")]
    pub cashback: Option<Box<crate::models::TransactionResourceAttributesCashback>>,
    #[serde(rename = "amount")]
    pub amount: Box<crate::models::MoneyObject>,
    #[serde(rename = "foreignAmount", deserialize_with = "Option::deserialize")]
    pub foreign_amount: Option<Box<crate::models::TransactionResourceAttributesForeignAmount>>,
    /// The date-time at which this transaction settled. This field will be `null` for transactions that are currently in the `HELD` status. 
    #[serde(rename = "settledAt", deserialize_with = "Option::deserialize")]
    pub settled_at: Option<String>,
    /// The date-time at which this transaction was first encountered. 
    #[serde(rename = "createdAt")]
    pub created_at: String,
}

impl TransactionResourceAttributes {
    pub fn new(status: crate::models::TransactionStatusEnum, raw_text: Option<String>, description: String, message: Option<String>, is_categorizable: bool, hold_info: Option<crate::models::TransactionResourceAttributesHoldInfo>, round_up: Option<crate::models::TransactionResourceAttributesRoundUp>, cashback: Option<crate::models::TransactionResourceAttributesCashback>, amount: crate::models::MoneyObject, foreign_amount: Option<crate::models::TransactionResourceAttributesForeignAmount>, settled_at: Option<String>, created_at: String) -> TransactionResourceAttributes {
        TransactionResourceAttributes {
            status,
            raw_text,
            description,
            message,
            is_categorizable,
            hold_info: if let Some(x) = hold_info {Some(Box::new(x))} else {None},
            round_up: if let Some(x) = round_up {Some(Box::new(x))} else {None},
            cashback: if let Some(x) = cashback {Some(Box::new(x))} else {None},
            amount: Box::new(amount),
            foreign_amount: if let Some(x) = foreign_amount {Some(Box::new(x))} else {None},
            settled_at,
            created_at,
        }
    }
}


